% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multi_chan.R
\name{k_mcnn}
\alias{k_mcnn}
\title{k_mcnn}
\usage{
k_mcnn(in_dim = 10000, in_length = 100, embed_dim = 128, sp_drop = 0.2,
  filter_sizes = c(1, 2, 3, 5), num_filters = 32, out_dim = 1,
  out_fun = "sigmoid", ...)
}
\arguments{
\item{in_dim}{Number of total vocabluary/words used}

\item{in_length}{Length of the input sequences}

\item{embed_dim}{Number of word vectors}

\item{sp_drop}{Spatial Dropout after Embedding}

\item{filter_sizes}{Filter sizes (windows)}

\item{num_filters}{Number of filters per layer}

\item{out_dim}{Number of neurons of the output layer}

\item{out_fun}{Output activation function}

\item{...}{Exit arguments}
}
\value{
model
}
\description{
get Keras Multi Channel CNN model
}
\examples{

Architecture is taken from [Code](https://www.kaggle.com/yekenot/textcnn-2d-convolution)

max_features = 100000
maxlen = 200
embed_size = 300
filter_sizes = [1,2,3,5]
num_filters = 32

inp = Input(shape=(maxlen, ))
x = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)
x = SpatialDropout1D(0.4)(x)
x = Reshape((maxlen, embed_size, 1))(x)

conv_0 = Conv2D(num_filters, kernel_size=(filter_sizes[0], embed_size), kernel_initializer='normal',
                activation='elu')(x)
conv_1 = Conv2D(num_filters, kernel_size=(filter_sizes[1], embed_size), kernel_initializer='normal',
                activation='elu')(x)
conv_2 = Conv2D(num_filters, kernel_size=(filter_sizes[2], embed_size), kernel_initializer='normal',
                activation='elu')(x)
conv_3 = Conv2D(num_filters, kernel_size=(filter_sizes[3], embed_size), kernel_initializer='normal',
                activation='elu')(x)

maxpool_0 = MaxPool2D(pool_size=(maxlen - filter_sizes[0] + 1, 1))(conv_0)
maxpool_1 = MaxPool2D(pool_size=(maxlen - filter_sizes[1] + 1, 1))(conv_1)
maxpool_2 = MaxPool2D(pool_size=(maxlen - filter_sizes[2] + 1, 1))(conv_2)
maxpool_3 = MaxPool2D(pool_size=(maxlen - filter_sizes[3] + 1, 1))(conv_3)

z = Concatenate(axis=1)([maxpool_0, maxpool_1, maxpool_2, maxpool_3])   
z = Flatten()(z)
z = Dropout(0.1)(z)

outp = Dense(6, activation="sigmoid")(z)

model = Model(inputs=inp, outputs=outp)
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

              
}
